package ramacciotti.beans_8_puzzle;

import java.awt.Color;
import java.util.Random;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeSupport;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author federico
 */
public class EightBoard extends JFrame implements PropertyChangeListener {

    private final EightTile[] tiles = new EightTile[9];
    private final VetoableChangeSupport veto = new VetoableChangeSupport(this);

    public EightBoard() {
        initComponents();

        // init tiles in array
        tiles[0] = eightTile1;
        tiles[1] = eightTile2;
        tiles[2] = eightTile3;
        tiles[3] = eightTile4;
        tiles[4] = eightTile5;
        tiles[5] = eightTile6;
        tiles[6] = eightTile7;
        tiles[7] = eightTile8;
        tiles[8] = eightTile9;

        // add listeners to tiles
        for (EightTile tile : tiles) {
            tile.addVetoableChangeListener(eightController1);
            this.addPropertyChangeListener(tile);
        }

        // add listener to controller
        this.addPropertyChangeListener(eightController1);
        eightController1.addPropertyChangeListener(this);
        this.veto.addVetoableChangeListener(eightController1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eightTile1 = new EightTile(1);
        eightTile2 = new EightTile(2);
        eightTile3 = new EightTile(3);
        eightTile4 = new EightTile(4);
        eightTile5 = new EightTile(5);
        eightTile6 = new EightTile(6);
        eightTile7 = new EightTile(7);
        eightTile8 = new EightTile(8);
        eightTile9 = new EightTile(9);
        eightController1 = new ramacciotti.beans_8_puzzle.EightController();
        restartButton = new javax.swing.JButton();
        flipButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eight Puzzle Game");
        setResizable(false);

        eightTile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile1ActionPerformed(evt);
            }
        });

        eightTile2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile2ActionPerformed(evt);
            }
        });

        eightTile3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile3ActionPerformed(evt);
            }
        });

        eightTile4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile4ActionPerformed(evt);
            }
        });

        eightTile5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile5ActionPerformed(evt);
            }
        });

        eightTile6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile6ActionPerformed(evt);
            }
        });

        eightTile7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile7ActionPerformed(evt);
            }
        });

        eightTile8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile8ActionPerformed(evt);
            }
        });

        eightTile9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightTile9ActionPerformed(evt);
            }
        });

        eightController1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        restartButton.setBackground(java.awt.Color.yellow);
        restartButton.setText("RESTART");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        flipButton.setBackground(java.awt.Color.cyan);
        flipButton.setText("FLIP");
        flipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eightTile7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(eightTile4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(eightTile1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eightTile2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eightTile5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(eightTile8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eightTile3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eightTile6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(eightTile9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eightController1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(flipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eightTile3, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(eightTile2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eightTile4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile6, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(eightTile7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eightTile9, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eightController1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restartButton)
                    .addComponent(flipButton))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eightTile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile1ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 0");
            tiles[0].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile1ActionPerformed

    private void eightTile2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile2ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 1");
            tiles[1].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile2ActionPerformed

    private void eightTile3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile3ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 2");
            tiles[2].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile3ActionPerformed

    private void eightTile4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile4ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 3");
            tiles[3].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile4ActionPerformed

    private void eightTile5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile5ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 4");
            tiles[4].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile5ActionPerformed

    private void eightTile6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile6ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 5");
            tiles[5].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile6ActionPerformed

    private void eightTile7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile7ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 6");
            tiles[6].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile7ActionPerformed

    private void eightTile8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile8ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 7");
            tiles[7].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile8ActionPerformed

    private void eightTile9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightTile9ActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            System.out.println("BOARD click on 8");
            tiles[8].click();
        }
        System.out.println("");
    }//GEN-LAST:event_eightTile9ActionPerformed

    /**
     * Restart button is clicked: generate random configuration, fire a property
     * change for restart
     *
     * @param evt
     */
    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        int[] labels = this.randomLabels();
        this.firePropertyChange("restart", null, labels);
        this.eightController1.setText("");
        checkCompletion();
        System.out.println("");
    }//GEN-LAST:event_restartButtonActionPerformed

    /**
     * Flip button is clicked: if game is started, fire vetoable change.
     * If vetoed, flash the button red
     *
     * @param evt
     */
    private void flipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipButtonActionPerformed
        if (!this.eightController1.getText().equals("START")) {
            try {

                this.veto.fireVetoableChange("flip", null, null);

            } catch (PropertyVetoException e) {

                Color oldColor = this.flipButton.getBackground();
                this.flipButton.setBackground(Color.RED);

                Timer timer = new Timer(200, t -> this.flipButton.setBackground(oldColor));
                timer.setRepeats(false);
                timer.start();
            }
        }
        System.out.println("");
    }//GEN-LAST:event_flipButtonActionPerformed

    /**
     * If a property changed, fire a label change to the listeners
     *
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        System.out.println("BOARD property change");
        String propertyName = evt.getPropertyName();
        if (!propertyName.equals("label")) {
            return;
        }

        int pos1 = (int) evt.getOldValue();
        int pos2 = (int) evt.getNewValue();
        int label1 = Integer.parseInt(tiles[pos1].getLabel());
        int label2 = Integer.parseInt(tiles[pos2].getLabel());

        this.firePropertyChange("label", label1, label2);

        checkCompletion();
    }

    /**
     * If the puzzle is completed, show a dialog for congratulations!
     */
    private void checkCompletion() {
        System.out.println("BOARD checking completion");
        boolean isComplete = true;

        for (int i = 0; i < 8; i++) {
            if (!tiles[i].getLabel().equals(String.valueOf(i + 1))) {
                isComplete = false;
                break;
            }
        }

        if (isComplete && this.eightController1.getText().equals("OK")) {
            SwingUtilities.invokeLater(() -> {
                try {
                    // Wait, in order to be able to see all the tiles green before the dialog
                    Thread.sleep(100);
                    JOptionPane.showMessageDialog(this, "Puzzle completed", "Well done!", JOptionPane.INFORMATION_MESSAGE);
                } catch (InterruptedException e) {
                    ;
                }
            });
        }
    }

    /**
     * Generate a random configuration for the puzzle
     *
     * @return int[9] containing [1,9] in random order
     */
    private int[] randomLabels() {
        int[] array = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        Random random = new Random();

        for (int i = array.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }

        return array;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EightBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EightBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ramacciotti.beans_8_puzzle.EightController eightController1;
    private ramacciotti.beans_8_puzzle.EightTile eightTile1;
    private ramacciotti.beans_8_puzzle.EightTile eightTile2;
    private ramacciotti.beans_8_puzzle.EightTile eightTile3;
    private ramacciotti.beans_8_puzzle.EightTile eightTile4;
    private ramacciotti.beans_8_puzzle.EightTile eightTile5;
    private ramacciotti.beans_8_puzzle.EightTile eightTile6;
    private ramacciotti.beans_8_puzzle.EightTile eightTile7;
    private ramacciotti.beans_8_puzzle.EightTile eightTile8;
    private ramacciotti.beans_8_puzzle.EightTile eightTile9;
    private javax.swing.JButton flipButton;
    private javax.swing.JButton restartButton;
    // End of variables declaration//GEN-END:variables

}
